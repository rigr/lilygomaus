name: Build ESP32 Firmware

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Ermöglicht manuellen Start

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 📦 Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: |
          ~/.platformio
          .pio
        key: ${{ runner.os }}-pio-${{ hashFiles('platformio.ini') }}
        restore-keys: |
          ${{ runner.os }}-pio-
          
    - name: 🔧 Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio
        
    - name: 📋 Show Environment Info
      run: |
        pio --version
        pio system info
        
    - name: 🏗️ Build Firmware
      run: |
        echo "Starting build..."
        pio run
        echo "Build complete!"
        
    - name: 📊 Show Build Info
      run: |
        ls -lh .pio/build/lilygo-t-display/
        echo "---"
        pio run --target size
        
    - name: 📦 Prepare Artifacts
      run: |
        mkdir -p firmware
        cp .pio/build/lilygo-t-display/firmware.bin firmware/
        cp .pio/build/lilygo-t-display/bootloader.bin firmware/ || echo "No bootloader"
        cp .pio/build/lilygo-t-display/partitions.bin firmware/ || echo "No partitions"
        
        # Create flash script
        cat > firmware/flash.sh << 'EOF'
        #!/bin/bash
        # Flash-Script für ESP32 LilyGo T-Display
        
        PORT=${1:-/dev/ttyUSB0}  # Linux/Mac
        # Windows: PORT=COM3
        
        if command -v esptool.py &> /dev/null; then
            ESPTOOL="esptool.py"
        elif command -v esptool &> /dev/null; then
            ESPTOOL="esptool"
        else
            echo "❌ esptool nicht gefunden!"
            echo "Installation: pip install esptool"
            exit 1
        fi
        
        echo "🔌 Flashe auf $PORT..."
        
        $ESPTOOL --chip esp32 --port $PORT --baud 921600 \
          --before default_reset --after hard_reset write_flash \
          -z --flash_mode dio --flash_freq 80m --flash_size detect \
          0x1000 bootloader.bin \
          0x8000 partitions.bin \
          0x10000 firmware.bin
        
        echo "✅ Flash abgeschlossen!"
        EOF
        
        chmod +x firmware/flash.sh
        
        # Create Windows batch file
        cat > firmware/flash.bat << 'EOF'
        @echo off
        REM Flash-Script für ESP32 LilyGo T-Display (Windows)
        
        set PORT=COM3
        if not "%1"=="" set PORT=%1
        
        where esptool.py >nul 2>&1
        if %ERRORLEVEL% NEQ 0 (
            echo esptool nicht gefunden!
            echo Installation: pip install esptool
            pause
            exit /b 1
        )
        
        echo Flashe auf %PORT%...
        
        esptool.py --chip esp32 --port %PORT% --baud 921600 ^
          --before default_reset --after hard_reset write_flash ^
          -z --flash_mode dio --flash_freq 80m --flash_size detect ^
          0x1000 bootloader.bin ^
          0x8000 partitions.bin ^
          0x10000 firmware.bin
        
        echo Flash abgeschlossen!
        pause
        EOF
        
        # Create README
        cat > firmware/README.txt << 'EOF'
        ╔═══════════════════════════════════════════════════════════╗
        ║  ESP32 LilyGo T-Display Mouse Tracker - Firmware v1.0    ║
        ╚═══════════════════════════════════════════════════════════╝

        📦 INHALT:
        - firmware.bin      Haupt-Firmware
        - bootloader.bin    ESP32 Bootloader
        - partitions.bin    Partitionstabelle
        - flash.sh          Flash-Script (Linux/Mac)
        - flash.bat         Flash-Script (Windows)

        🔧 INSTALLATION:

        Methode 1: Web-Tool (empfohlen, keine Installation nötig)
        1. Öffne: https://espressif.github.io/esptool-js/
        2. ESP32 per USB verbinden
        3. "Connect" klicken
        4. Firmware-Dateien hinzufügen:
           - 0x1000: bootloader.bin
           - 0x8000: partitions.bin
           - 0x10000: firmware.bin
        5. "Program" klicken

        Methode 2: esptool (Python)
        1. Installation: pip install esptool
        2. Linux/Mac: ./flash.sh /dev/ttyUSB0
           Windows:   flash.bat COM3

        Methode 3: Manuell
        esptool.py --chip esp32 --port PORT --baud 921600 \
          write_flash 0x1000 bootloader.bin \
                      0x8000 partitions.bin \
                      0x10000 firmware.bin

        📡 NACH DEM FLASH:
        1. ESP32 neu starten (Reset-Button oder USB ab/an)
        2. WLAN suchen: ESPMAUS (Passwort: MausMaus)
        3. Browser: http://192.168.4.1
        4. Maus anschließen (USB oder Bluetooth)

        🔍 TROUBLESHOOTING:
        - "Port nicht gefunden": Treiber installieren (CH340/CP2102)
        - "Connect failed": Boot-Modus erzwingen (GPIO0 halten + Reset)
        - "Hash mismatch": Flash löschen (esptool.py erase_flash)

        📚 Dokumentation: https://github.com/rigr/lilygomaus
        EOF
        
    - name: 📤 Upload Firmware
      uses: actions/upload-artifact@v4
      with:
        name: esp32-firmware
        path: firmware/
        retention-days: 90
        
    - name: 🎉 Build Summary
      run: |
        echo "## ✅ Build erfolgreich!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Firmware-Größe" >> $GITHUB_STEP_SUMMARY
        SIZE=$(stat -f%z firmware/firmware.bin 2>/dev/null || stat -c%s firmware/firmware.bin)
        SIZE_KB=$((SIZE / 1024))
        echo "- **Firmware**: ${SIZE_KB} KB" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📥 Download" >> $GITHUB_STEP_SUMMARY
        echo "Lade die Firmware aus den **Artifacts** herunter (oben auf der Seite)." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔧 Flash-Anleitung" >> $GITHUB_STEP_SUMMARY
        echo "1. Web-Tool: https://espressif.github.io/esptool-js/" >> $GITHUB_STEP_SUMMARY
        echo "2. Oder mit esptool: \`./flash.sh /dev/ttyUSB0\`" >> $GITHUB_STEP_SUMMARY

    - name: 📋 Create Release (bei Tag)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: firmware/*
        body: |
          ## ESP32 LilyGo T-Display Mouse Tracker
          
          ### Installation
          1. Firmware herunterladen
          2. Web-Flash-Tool öffnen: https://espressif.github.io/esptool-js/
          3. ESP32 verbinden und flashen
          
          ### Changelog
          Siehe CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
